version: '3.8'

services:
  minio:
    container_name: minio_toxic_segmenter
    hostname: minio
    image: quay.io/minio/minio:RELEASE.2022-05-08T23-50-31Z
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - s3
    environment:
      MINIO_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      MINIO_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - ./Docker/minio/:/data

  db:
    container_name: postgres_toxic_segmenter
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
    volumes:
      - ./Docker/postgres/:/data/postgres
    #      - postgres:/data/postgres  # for windows (not permissions for read/write)
    ports:
      - "5432:5432"
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin_toxic_segmenter
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    volumes:
      - ./Docker/pgadmin/:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres

  mlflow:
    restart: always
    image: mlflow_server
    container_name: mlflow_toxic_segmenter
    ports:
      - "5001:5000"  # for macOS 5000 is busy
    networks:
      - postgres
      - s3
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
    command: mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB} --default-artifact-root s3://${AWS_S3_BUCKET}/ --host 0.0.0.0

networks:
  s3:
    driver: bridge
  postgres:
    driver: bridge